
/*******************************************************************************
* image
* filename: unsaved
* name: lockopen
*
* preset name: Color R8G8B8
* data block size: 32 bit(s), uint32_t
* RLE compression enabled: no
* conversion type: Color, not_used not_used
* bits per pixel: 24
*
* preprocess:
*  main scan direction: top_to_bottom
*  line scan direction: forward
*  inverse: no
*******************************************************************************/

/*
 typedef struct {
     const uint32_t *data;
     uint16_t width;
     uint16_t height;
     uint8_t dataSize;
     } tImage;
*/
#include <stdint.h>



static const uint32_t image_data_lockopen[768] = {
    0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xfffffffe, 0xfefee8e8, 0xe8acacac, 0x66666633, 0x33331515, 0x15050505, 0x05050515, 0x15153333, 0x33676767, 0xadadade9, 0xe9e9fefe, 0xfeffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 
    0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xfffbfbfb, 0xc6c6c664, 0x64641d1d, 0x1d0b0b0b, 0x07070703, 0x03030101, 0x01000000, 0x00000001, 0x01010303, 0x03070707, 0x0c0c0c1d, 0x1d1d6666, 0x66c7c7c7, 0xfbfbfbff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 
    0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffd2d2, 0xd2727272, 0x2626260c, 0x0c0c0202, 0x02000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000002, 0x02020c0c, 0x0c272727, 0x747474d3, 0xd3d3ffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 
    0xffffffff, 0xffffffff, 0xffffffff, 0xfefefeba, 0xbaba5252, 0x52131313, 0x03030300, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00030303, 0x1313134f, 0x4f4fb6b6, 0xb6fefefe, 0xffffffff, 0xffffffff, 0xffffffff, 
    0xffffffff, 0xffffffff, 0xfffefefe, 0xa4a4a442, 0x42420e0e, 0x0e000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000000d, 0x0d0d4141, 0x41a4a4a4, 0xfefefeff, 0xffffffff, 0xffffffff, 
    0xffffffff, 0xffffffff, 0xffb6b6b6, 0x4141410a, 0x0a0a0000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00030303, 0x1d1d1d2e, 0x2e2e2424, 0x240c0c0c, 0x00000000, 0x00000a0a, 0x0a414141, 0xb8b8b8ff, 0xffffffff, 0xffffffff, 
    0xffffffff, 0xffffd2d2, 0xd24f4f4f, 0x0d0d0d00, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00003737, 0x37808080, 0xa8a8a8b5, 0xb5b5afaf, 0xaf909090, 0x4e4e4e11, 0x11110000, 0x000d0d0d, 0x515151d4, 0xd4d4ffff, 0xffffffff, 
    0xfffffffb, 0xfbfb7272, 0x72131313, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000003f, 0x3f3faaaa, 0xaaeaeaea, 0xfdfdfdff, 0xffffffff, 0xfff2f2f2, 0xc2c2c265, 0x65651010, 0x10000000, 0x14141474, 0x7474fbfb, 0xfbffffff, 
    0xffffffc6, 0xc6c62626, 0x26030303, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x121212ae, 0xaeaef6f6, 0xf6fafafa, 0xcfcfcfb5, 0xb5b5c6c6, 0xc6ebebeb, 0xfcfcfcc4, 0xc4c44e4e, 0x4e000000, 0x03030328, 0x2828c8c8, 0xc8ffffff, 
    0xfefefe64, 0x64640c0c, 0x0c000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x4a4a4af1, 0xf1f1ffff, 0xffbfbfbf, 0x6464643a, 0x3a3a4f4f, 0x4fa3a3a3, 0xecececf1, 0xf1f19797, 0x970a0a0a, 0x0000000c, 0x0c0c6767, 0x67fefefe, 
    0xe8e8e81d, 0x1d1d0202, 0x02000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x898989f7, 0xf7f7fdfd, 0xfd5c5c5c, 0x0e0e0e00, 0x00000000, 0x004b4b4b, 0xc2c2c2ff, 0xffffb9b9, 0xb9212121, 0x00000002, 0x02021e1e, 0x1ee9e9e9, 
    0xacacac0b, 0x0b0b0000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xa1a1a1f9, 0xf9f9f7f7, 0xf7343434, 0x01010100, 0x00000000, 0x002d2d2d, 0xa4a4a4ff, 0xffffc2c2, 0xc2343434, 0x00000000, 0x00000c0c, 0x0caeaeae, 
    0x65656507, 0x07070000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xa5a5a5f9, 0xf9f9f3f3, 0xf3303030, 0x00000000, 0x00000000, 0x00292929, 0xa0a0a0ff, 0xffffc3c3, 0xc3373737, 0x00000000, 0x00000707, 0x07686868, 
    0x32323203, 0x03030000, 0x00000000, 0x00000000, 0x00000000, 0x00040404, 0x1010101a, 0x1a1a1b1b, 0x1b1b1b1b, 0x1b1b1b1b, 0x1b1b1b1b, 0x1b1b1b1b, 0xafafaffa, 0xfafaf4f4, 0xf4444444, 0x0a0a0a02, 0x02020000, 0x00262626, 0x959595ed, 0xededb5b5, 0xb5333333, 0x00000000, 0x00000404, 0x04353535, 
    0x14141401, 0x01010000, 0x00000000, 0x00000000, 0x00000000, 0x00232323, 0x7d7d7dc7, 0xc7c7cfcf, 0xcfcfcfcf, 0xcfcfcfcf, 0xcfcfcfcf, 0xcfcfcfcf, 0xeeeeeefe, 0xfefefdfd, 0xfdc7c7c7, 0x55555510, 0x10100000, 0x00121212, 0x4646466f, 0x6f6f5555, 0x55181818, 0x00000000, 0x00000101, 0x01161616, 
    0x06060600, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00707070, 0xe7e7e7ff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xc9c9c93c, 0x3c3c0000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00070707, 
    0x06060600, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x007e7e7e, 0xf5f5f5ff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xdddddd45, 0x45450000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00070707, 
    0x14141401, 0x01010000, 0x00000000, 0x00000000, 0x00000000, 0x007e7e7e, 0xf5f5f5ff, 0xffffffff, 0xffffffff, 0xe9e9e988, 0x88884747, 0x47a7a7a7, 0xffffffff, 0xffffffff, 0xffffffff, 0xdddddd45, 0x45450000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000101, 0x01161616, 
    0x33333303, 0x03030000, 0x00000000, 0x00000000, 0x00000000, 0x007e7e7e, 0xf5f5f5ff, 0xffffffff, 0xfffcfcfc, 0xc5c5c512, 0x12120909, 0x09232323, 0xffffffff, 0xffffffff, 0xffffffff, 0xdddddd45, 0x45450000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000404, 0x04363636, 
    0x67676707, 0x07070000, 0x00000000, 0x00000000, 0x00000000, 0x007e7e7e, 0xf5f5f5ff, 0xffffffff, 0xfffefefe, 0xd1d1d123, 0x23230404, 0x04424242, 0xffffffff, 0xffffffff, 0xffffffff, 0xdddddd45, 0x45450000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000707, 0x076a6a6a, 
    0xadadad0c, 0x0c0c0000, 0x00000000, 0x00000000, 0x00000000, 0x007e7e7e, 0xf5f5f5ff, 0xffffffff, 0xffffffff, 0xe7e7e777, 0x77770b0b, 0x0ba6a6a6, 0xffffffff, 0xffffffff, 0xffffffff, 0xdddddd45, 0x45450000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000c0c, 0x0cb0b0b0, 
    0xe9e9e91d, 0x1d1d0202, 0x02000000, 0x00000000, 0x00000000, 0x007d7d7d, 0xf4f4f4ff, 0xffffffff, 0xffffffff, 0xf0f0f0a1, 0xa1a12d2d, 0x2dcecece, 0xffffffff, 0xffffffff, 0xffffffff, 0xdbdbdb45, 0x45450000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000002, 0x02021e1e, 0x1eeaeaea, 
    0xfefefe66, 0x66660c0c, 0x0c000000, 0x00000000, 0x00000000, 0x00666666, 0xddddddff, 0xffffffff, 0xffffffff, 0xf9f9f9dc, 0xdcdcb2b2, 0xb2ededed, 0xffffffff, 0xffffffff, 0xffffffff, 0xbbbbbb36, 0x36360000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000000c, 0x0c0c6767, 0x67fefefe, 
    0xffffffc7, 0xc7c72727, 0x27030303, 0x00000000, 0x00000000, 0x002a2a2a, 0x767676a7, 0xa7a7adad, 0xadadadad, 0xadadadad, 0xadadadad, 0xadadadad, 0xadadadad, 0xadadadad, 0xada2a2a2, 0x59595915, 0x15150000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x03030328, 0x2828c8c8, 0xc8ffffff, 
    0xfffffffb, 0xfbfb7474, 0x74131313, 0x00000000, 0x00000000, 0x00010101, 0x16161630, 0x30303636, 0x36363636, 0x36363636, 0x36363636, 0x36363636, 0x36363636, 0x36363636, 0x362b2b2b, 0x0b0b0b00, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x14141476, 0x7676fbfb, 0xfbffffff, 
    0xffffffff, 0xffffd3d3, 0xd3505050, 0x0d0d0d00, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000d0d0d, 0x525252d5, 0xd5d5ffff, 0xffffffff, 
    0xffffffff, 0xffffffff, 0xffb8b8b8, 0x4141410a, 0x0a0a0000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000a0a, 0x0a424242, 0xb9b9b9ff, 0xffffffff, 0xffffffff, 
    0xffffffff, 0xffffffff, 0xfffefefe, 0xa4a4a442, 0x42420e0e, 0x0e000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000000d, 0x0d0d4141, 0x41a4a4a4, 0xfefefeff, 0xffffffff, 0xffffffff, 
    0xffffffff, 0xffffffff, 0xffffffff, 0xfefefeba, 0xbaba5252, 0x52141414, 0x03030300, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00030303, 0x14141450, 0x5050b6b6, 0xb6fefefe, 0xffffffff, 0xffffffff, 0xffffffff, 
    0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffd4d4, 0xd4747474, 0x2828280c, 0x0c0c0202, 0x02000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000002, 0x02020c0c, 0x0c282828, 0x767676d5, 0xd5d5ffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 
    0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xfffbfbfb, 0xc8c8c867, 0x67671e1e, 0x1e0c0c0c, 0x07070704, 0x04040101, 0x01000000, 0x00000001, 0x01010404, 0x04070707, 0x0c0c0c1e, 0x1e1e6767, 0x67c8c8c8, 0xfbfbfbff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 
    0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xfffffffe, 0xfefeeaea, 0xeaaeaeae, 0x68686835, 0x35351616, 0x16060606, 0x06060616, 0x16163535, 0x35696969, 0xafafafea, 0xeaeafefe, 0xfeffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff
};
const tImage lockopen = { image_data_lockopen, 32, 32,
    32 };

